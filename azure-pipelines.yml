# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  projectFilepath: '**/Chatbot.Functions.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages: 
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk 3.1'
      inputs:
        version: 3.1.x
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '$(projectFilepath)'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: Publish Function App
      inputs:
        command: publish
        publishWebProjects: false
        projects: '$(projectFilepath)'
        arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: 'chatbot_function'

- stage: Deploy
  displayName: Deploy 
  jobs:
  - deployment: Deploy
    environment: dio-chatbot
    displayName: Deploy
    pool:
      name: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureFunctionApp@1
              displayName: 'Deploy Azure Function App'
              inputs:
                azureSubscription: 'Assinatura do Visual Studio Enterprise â€“ MPN'
                appType: functionApp
                appName: fachatbotdio
                package: '$(Pipeline.Workspace)/chatbot_function/*.zip'
                appSettings: -UrlBase https://api.hgbrasil.com/weather -ApiKeyWeather f728e30e